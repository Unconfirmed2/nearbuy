
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Copy } from 'lucide-react';
import { toast } from 'sonner';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  sku: string;
  brand?: string;
  images: string[];
  inventory: number;
}

interface DuplicateProductDialogProps {
  open: boolean;
  onClose: () => void;
  product: Product | null;
  onDuplicate: (productData: Partial<Product>) => void;
}

const DuplicateProductDialog: React.FC<DuplicateProductDialogProps> = ({
  open,
  onClose,
  product,
  onDuplicate
}) => {
  const [formData, setFormData] = useState({
    name: '',
    sku: '',
    price: 0,
    copyImages: true,
    copyInventory: false
  });

  React.useEffect(() => {
    if (product) {
      setFormData({
        name: `${product.name} (Copy)`,
        sku: `${product.sku}-COPY`,
        price: product.price,
        copyImages: true,
        copyInventory: false
      });
    }
  }, [product]);

  const handleSubmit = () => {
    if (!product) return;
    
    if (!formData.name.trim() || !formData.sku.trim()) {
      toast.error('Name and SKU are required');
      return;
    }

    const duplicatedProduct = {
      ...product,
      name: formData.name,
      sku: formData.sku,
      price: formData.price,
      images: formData.copyImages ? product.images : [],
      inventory: formData.copyInventory ? product.inventory : 0,
      id: undefined // Will be generated by the system
    };

    onDuplicate(duplicatedProduct);
    toast.success('Product duplicated successfully');
    onClose();
  };

  if (!product) return null;

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Copy className="w-5 h-5" />
            Duplicate Product
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div className="bg-gray-50 p-3 rounded-lg">
            <h4 className="font-medium text-sm">Duplicating:</h4>
            <p className="text-sm text-gray-600">{product.name}</p>
          </div>

          <div>
            <Label htmlFor="name">Product Name *</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="Enter new product name"
            />
          </div>

          <div>
            <Label htmlFor="sku">SKU *</Label>
            <Input
              id="sku"
              value={formData.sku}
              onChange={(e) => setFormData(prev => ({ ...prev, sku: e.target.value }))}
              placeholder="Enter new SKU"
            />
          </div>

          <div>
            <Label htmlFor="price">Price</Label>
            <Input
              id="price"
              type="number"
              step="0.01"
              value={formData.price}
              onChange={(e) => setFormData(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
            />
          </div>

          <div className="space-y-3">
            <h4 className="font-medium text-sm">Copy Options:</h4>
            
            <div className="flex items-center space-x-2">
              <Checkbox
                id="copyImages"
                checked={formData.copyImages}
                onCheckedChange={(checked) => 
                  setFormData(prev => ({ ...prev, copyImages: checked as boolean }))
                }
              />
              <Label htmlFor="copyImages" className="text-sm">
                Copy product images ({product.images.length} images)
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="copyInventory"
                checked={formData.copyInventory}
                onCheckedChange={(checked) => 
                  setFormData(prev => ({ ...prev, copyInventory: checked as boolean }))
                }
              />
              <Label htmlFor="copyInventory" className="text-sm">
                Copy inventory count ({product.inventory} units)
              </Label>
            </div>
          </div>

          <div className="flex gap-2 pt-4">
            <Button onClick={handleSubmit} className="flex-1">
              <Copy className="w-4 h-4 mr-2" />
              Duplicate Product
            </Button>
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default DuplicateProductDialog;
